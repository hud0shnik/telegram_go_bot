package mods

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API

type TelegramResponse struct {
	Result []Update `json:"result"`
}

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat    Chat    `json:"chat"`
	Text    string  `json:"text"`
	Sticker Sticker `json:"sticker"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type Sticker struct {
	File_id string `json:"file_id"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ API

type RedditResponse struct {
	Title   string `json:"title"`
	Url     string `json:"url"`
	Nsfw    bool   `json:"nsfw"`
	Spoiler bool   `json:"spoiler"`
}

type CryptoResponse struct {
	Symbol        string `json:"symbol"`
	ChangePercent string `json:"priceChangePercent"`
	LastPrice     string `json:"lastPrice"`
}

type IPApiResponse struct {
	Status      string `json:"status"`
	CountryName string `json:"country"`
	Region      string `json:"regionName"`
	Zip         string `json:"zip"`
}

type DogResponse struct {
	DogUrl string `json:"message"`
}

type InfoResponse struct {
	Error         string `json:"error"`
	Username      string `json:"username"`
	Name          string `json:"name"`
	Followers     string `json:"followers"`
	Following     string `json:"following"`
	Repositories  string `json:"repositories"`
	Packages      string `json:"packages"`
	Stars         string `json:"stars"`
	Contributions string `json:"contributions"`
	Avatar        string `json:"avatar"`
}

type CommitsResponse struct {
	Error    string `json:"error"`
	Date     string `json:"date"`
	Username string `json:"username"`
	Commits  int    `json:"commits"`
	Color    int    `json:"color"`
}

type OsuUserInfo struct {
	Error          string   `json:"error"`
	Username       string   `json:"username"`
	Names          []string `json:"previous_usernames"`
	AvatarUrl      string   `json:"avatar_url"`
	CountryCode    string   `json:"country_code"`
	GlobalRank     string   `json:"global_rank"`
	CountryRank    string   `json:"country_rank"`
	PP             string   `json:"pp"`
	PlayTime       string   `json:"play_time"`
	SSH            string   `json:"ssh"`
	SS             string   `json:"ss"`
	SH             string   `json:"sh"`
	S              string   `json:"s"`
	A              string   `json:"a"`
	RankedScore    string   `json:"ranked_score"`
	Accuracy       string   `json:"accuracy"`
	PlayCount      string   `json:"play_count"`
	TotalScore     string   `json:"total_score"`
	TotalHits      string   `json:"total_hits"`
	MaximumCombo   string   `json:"maximum_combo"`
	Replays        string   `json:"replays"`
	Level          string   `json:"level"`
	SupportLvl     string   `json:"support_level"`
	DefaultGroup   string   `json:"default_group"`
	IsOnline       string   `json:"is_online"`
	IsActive       string   `json:"is_active"`
	IsDeleted      string   `json:"is_deleted"`
	IsNat          string   `json:"is_nat"`
	IsModerator    string   `json:"is_moderator"`
	IsBot          string   `json:"is_bot"`
	IsSilenced     string   `json:"is_silenced"`
	IsRestricted   string   `json:"is_restricted"`
	IsLimitedBn    string   `json:"is_limited_bn"`
	IsSupporter    string   `json:"is_supporter"`
	ProfileColor   string   `json:"profile_color"`
	PmFriendsOnly  string   `json:"pm_friends_only"`
	PostCount      string   `json:"post_count"`
	FollowersCount string   `json:"follower_count"`
}

type OsuBadge struct {
	AwardedAt   string `json:"awarded_at"`
	Description string `json:"description"`
	ImageUrl    string `json:"image_url"`
}

type OsuSmartInfo struct {
	UserID                  int     `json:"id"`
	Kudosu                  int     `json:"kudosu"`
	MaxFriends              int     `json:"max_friends"`
	MaxBLock                int     `json:"max_block"`
	PostCount               int     `json:"post_count"`
	CommentsCount           int     `json:"comments_count"`
	FollowerCount           int     `json:"follower_count"`
	MappingFollowerCount    int     `json:"mapping_follower_count"`
	PendingBeatmapsetCount  int     `json:"pending_beatmapset_count"`
	Level                   int     `json:"level"`
	GlobalRank              int64   `json:"global_rank"`
	PP                      float64 `json:"pp"`
	RankedScore             int     `json:"ranked_score"`
	Accuracy                float64 `json:"accuracy"`
	PlayCount               int     `json:"play_count"`
	PlayTime                string  `json:"play_time"`
	PlayTimeSeconds         int64   `json:"play_time_seconds"`
	TotalScore              int64   `json:"total_score"`
	TotalHits               int64   `json:"total_hits"`
	MaximumCombo            int     `json:"maximum_combo"`
	Replays                 int     `json:"replays"`
	SS                      int     `json:"ss"`
	SSH                     int     `json:"ssh"`
	S                       int     `json:"s"`
	SH                      int     `json:"sh"`
	A                       int     `json:"a"`
	CountryRank             int     `json:"country_rank"`
	SupportLvl              int     `json:"support_level"`
	Medals                  int     `json:"medals"`
	RankHistory             History `json:"rank_history"`
	UnrankedBeatmapsetCount int     `json:"unranked_beatmapset_count"`
}

type History struct {
	Mode string `json:"mode"`
	Data []int  `json:"data"`
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
func Help(botUrl string, update Update) {
	SendMsg(botUrl, update, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+"\n\n"+
		"/commits username date - –∫–æ–º–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å"+"\n\n"+
		"/github username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub"+"\n\n"+
		"/osu username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Osu"+"\n\n"+
		"/osu_smart username - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Osu"+"\n\n"+
		"/ip 67.77.77.7 - —É–∑–Ω–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ ip"+"\n\n"+
		"/crypto - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã SHIB"+"\n\n"+
		"/d 20 - –∫–∏–Ω—É—Ç—å –¥20, –≤–º–µ—Å—Ç–æ 20 –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ"+"\n\n"+
		"/coin - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"+"\n\n"+
		"/meme - –º–µ–º —Å Reddit"+"\n\n"+
		"/cat –∏ /parrot - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞ –∏–ª–∏ –ø–æ–ø—É–≥–∞—è "+"\n\n"+
		"–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —è –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É üôÉ")
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
func Random(n int) int {
	rand.Seed(time.Now().Unix())
	return rand.Intn(n)
}

// –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ n-–≥—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
func Dice(parameter string) string {

	// –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≥—Ä–∞–Ω–µ–π
	num, err := strconv.Atoi(parameter)

	// –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π
	if err != nil {
		return "–≠—Ç–æ –≤–æ–æ–±—â–µ –∫—É–±–∏–∫?ü§®"
	}
	if num < 1 {
		return "–∫–∞–∫ —è –ø–æ —Ç–≤–æ–µ–º—É –∫–∏–Ω—É —Ç–∞–∫–æ–π –∫—É–±–∏–∫? –ß–µ—Ä–µ–∑ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ?ü§®"
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ d10 (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É–±–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –≥—Ä–∞–Ω—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "0")
	if num == 10 {
		return strconv.Itoa(Random(10))
	}

	// –ë—Ä–æ—Å–æ–∫
	return strconv.Itoa(1 + Random(num))
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
func Ball8(botUrl string, update Update) {

	// –ú–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
	answers := [10]string{
		"–î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
		"100%",
		"–î–∞.",
		"100000000%",
		"–¢–æ—á–Ω–æ –¥–∞!",
		"–ù–µ—Ç, –ø—Ñ—Ñ",
		"–ù–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ—Ç",
		"–¢–æ—á–Ω–æ –Ω–µ—Ç!",
		"–ù–µ—Ç, –Ω–µ—Ç, –Ω–µ—Ç",
		"–ù–µ—Ç.",
	}

	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	SendMsg(botUrl, update, answers[Random(10)])
}

// –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç–∫–∏
func Coin(botUrl string, update Update) {
	if Random(2) == 0 {
		SendMsg(botUrl, update, "–û—Ä—ë–ª")
	} else {
		SendMsg(botUrl, update, "–†–µ—à–∫–∞")
	}
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤)
func InitConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
func SendErrorMessage(botUrl string, update Update, errorCode int) {

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É
	var result string
	switch errorCode {
	case 1:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã API"
	case 2:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã json.Marshal()"
	case 3:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendSticker"
	case 4:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendPhoto"
	case 5:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendMessage"
	case 6:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã stickers.json"
	default:
		result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
	}

	// –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–µ–Ω—è
	var updateDanya Update
	updateDanya.Message.Chat.ChatId = viper.GetInt("DanyaChatId")
	SendMsg(botUrl, updateDanya, "–î–∞–Ω—å, —Ç—É—Ç —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "+result+", –Ω–∞–¥–µ—é—Å—å –æ–Ω —Å–∫–æ—Ä–æ —Ç–µ–±–µ –æ –Ω–µ–π –Ω–∞–ø–∏—à–µ—Ç.")

	// –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –¥–ª—è –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
	result += ", –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã \n\nhttps://vk.com/hud0shnik\nhttps://vk.com/hud0shnik\nhttps://vk.com/hud0shnik"
	SendMsg(botUrl, update, result)
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å Reddit
func SendFromReddit(botUrl string, update Update, board string) error {

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	resp, err := http.Get("https://meme-api.herokuapp.com/gimme/" + board)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("Meme API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return err
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var response = new(RedditResponse)
	json.Unmarshal(body, &response)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–∫—É
	if response.Nsfw || response.Spoiler {
		response.Url = "https://belikebill.ga/billgen-API.php?default=1"
		response.Title = "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–æ —Å–ø–æ–π–ª–µ—Ä–æ–º –∏–ª–∏ nsfw-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É —è –∑–∞–º–µ–Ω–∏–ª –µ—ë –Ω–∞ —ç—Ç–æ"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	SendPict(botUrl, update, SendPhoto{
		ChatId:   update.Message.Chat.ChatId,
		PhotoUrl: response.Url,
		Caption:  response.Title,
	})

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã SHIB
func SendCryptoData(botUrl string, update Update) {

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	resp, err := http.Get("https://api2.binance.com/api/v3/ticker/24hr?symbol=SHIBBUSD")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("Binance API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var response = new(CryptoResponse)
	json.Unmarshal(body, &response)

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	if response.ChangePercent[0] == '-' {
		SendMsg(botUrl, update, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å "+response.Symbol+" —É–ø–∞–ª –Ω–∞ "+response.ChangePercent[1:]+"%\n"+
			"–¥–æ –æ—Ç–º–µ—Ç–∫–∏ –≤ "+response.LastPrice+"$\n\n")
		SendRandomShibaSticker(botUrl, update, true)
	} else {
		SendMsg(botUrl, update, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å "+response.Symbol+" –≤—ã—Ä–æ—Å –Ω–∞ "+response.ChangePercent+"%\n"+
			"–¥–æ –æ—Ç–º–µ—Ç–∫–∏ –≤ "+response.LastPrice+"$\n\n")
		SendRandomShibaSticker(botUrl, update, false)
	}
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP –∞–¥—Ä–µ—Å—É
func CheckIPAdress(botUrl string, update Update, IP string) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π IP
	if IP == "" {
		SendMsg(botUrl, update, "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ ip, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: \n\n/ip 67.77.77.7")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ localhost
	if IP == "127.0.0.1" {
		SendMsg(botUrl, update, "–ê–π–ø–∏—à–Ω–∏–∫ –ª–æ–∫–∞–ª—Ö–æ—Å—Ç–∞, –∞–≥–∞")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYLGGzR7310Hqf8K2sljgcQF8kgOpYAAJTAAOtZbwUo9c59oswVBQjBA")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
	ipArray := strings.Split(IP, ".")
	if len(ipArray) != 4 {
		SendMsg(botUrl, update, "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç IP")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIY4mG13Vr0CzGwyXA1eL3esZVCWYFhAAJIAAOtZbwUgHOKzxQtAAHcIwQ")
		return
	}
	for _, ipPart := range ipArray {
		num, err := strconv.Atoi(ipPart)
		if err != nil || num < 0 || num > 255 || (ipPart != fmt.Sprint(num)) {
			SendMsg(botUrl, update, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω IP")
			SendStck(botUrl, update, "CAACAgIAAxkBAAIY4GG13SepKZJisWVrMrzQ9JyRpWFrAAJKAAOtZbwUiXsNXgiPepIjBA")
			return
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API
	resp, err := http.Get("http://ip-api.com/json/" + IP)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("IP API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var response = new(IPApiResponse)
	json.Unmarshal(body, &response)

	// –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–π–ø–∏—à–Ω–∏–∫–æ–≤ –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã
	if response.Status != "success" {
		SendMsg(botUrl, update, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç IP")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIY4mG13Vr0CzGwyXA1eL3esZVCWYFhAAJIAAOtZbwUgHOKzxQtAAHcIwQ")
		return
	}

	// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
	SendMsg(botUrl, update, "–ù–∞—à—ë–ª! –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è - "+response.CountryName+" "+"\n"+
		"–†–µ–≥–∏–æ–Ω - "+response.Region+"\n"+
		"–ò–Ω–¥–µ–∫—Å - "+response.Zip+"\n\n"+
		"–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º IP, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—è—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤–µ—Å—å –∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ.")
	SendStck(botUrl, update, "CAACAgIAAxkBAAIXqmGyGtvN_JHUQVDXspAX5jP3BvU9AAI5AAOtZbwUdHz8lasybOojBA")
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub
func SendInfo(botUrl string, update Update, username string) {

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
	if username == "" {
		username = "hud0shnik"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/user?id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("GithubGoAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(InfoResponse)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if user.Username == "" {
		fmt.Println("GithubGoAPI error: ", err)
		SendMsg(botUrl, update, user.Error)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendPict(botUrl, update, SendPhoto{
		PhotoUrl: user.Avatar,
		ChatId:   update.Message.Chat.ChatId,
		Caption: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + user.Username + ":\n" +
			"–ò–º—è " + user.Name + "\n" +
			"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ " + user.Stars + " ‚≠ê\n" +
			"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ " + user.Followers + " ü§©\n" +
			"–ü–æ–¥–ø–∏—Å–æ–∫ " + user.Following + " üïµÔ∏è\n" +
			"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ " + user.Repositories + " üìò\n" +
			"–ü–∞–∫–µ—Ç–æ–≤ " + user.Packages + " üì¶\n" +
			"–ö–æ–Ω—Ç—Ä–∏–±—É—Ü–∏–π –∑–∞ –≥–æ–¥ " + user.Contributions + " üü©\n" +
			"–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä:\n " + user.Avatar,
	})
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub
func SendCommits(botUrl string, update Update, username, date string) {

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
	if username == "" {
		username = "hud0shnik"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/commits?id=" + username + "&date=" + date)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("GithubStatsAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(CommitsResponse)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Å–ø–æ–Ω—Å
	if user.Date == "" {
		fmt.Println("GithubStatsAPI error: ", err)
		SendMsg(botUrl, update, user.Error)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –º–µ–Ω—è–µ—Ç date –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è"
	if date == "" {
		date = "—Å–µ–≥–æ–¥–Ω—è"
	}

	// –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	switch user.Color {
	case 1:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits))
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYwmG11bAfndI1wciswTEVJUEdgB2jAAI5AAOtZbwUdHz8lasybOojBA")
	case 2:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits)+", –Ω–µ–ø–ª–æ—Ö–æ!")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIXWmGyDE1aVXGUY6lcjKxx9bOn0JA1AAJOAAOtZbwUIWzOXysr2zwjBA")
	case 3:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits)+", –æ—Ç–ª–∏—á–Ω–æ!!")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYymG11mMdODUQUZGsQO97V9O0ZLJCAAJeAAOtZbwUvL_TIkzK-MsjBA")
	case 4:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits)+", –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!!!")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIXXGGyDFClr69PKZXJo9dlYMbyilXLAAI1AAOtZbwU9aVxXMUw5eAjBA")
	default:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYG2GzRVNm_d_mVDIOaiLXkGukArlTAAJDAAOtZbwU_-iXZG7hfLsjBA")
	}
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Osu!
func SendOsuInfo(botUrl string, update Update, username string) {

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
	if username == "" {
		username = "hud0shnik"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API
	resp, err := http.Get("https://osustatsapi.vercel.app/api/userString?id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("OsuStatsAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(OsuUserInfo)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if user.Username == "" {
		SendMsg(botUrl, update, user.Error)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞

	responseText := "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + user.Username + "\n"

	if user.Names[0] != "" {
		responseText += "Aka " + user.Names[0] + "\n"
	}

	responseText += "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã " + user.CountryCode + "\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ –º–∏—Ä–µ " + user.GlobalRank + "\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ —Å—Ç—Ä–∞–Ω–µ " + user.CountryRank + "\n" +
		"–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–π " + user.Accuracy + "%\n" +
		"PP " + user.PP + "\n" +
		"-------–∫–∞—Ä—Ç—ã---------\n" +
		"SSH: " + user.SSH + "\n" +
		"SH: " + user.SH + "\n" +
		"SS: " + user.SS + "\n" +
		"S: " + user.S + "\n" +
		"A: " + user.A + "\n" +
		"---------------------------\n" +
		"–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ " + user.RankedScore + "\n" +
		"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä " + user.PlayCount + "\n" +
		"–í—Å–µ–≥–æ –æ—á–∫–æ–≤ " + user.TotalScore + "\n" +
		"–í—Å–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π " + user.TotalHits + "\n" +
		"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ " + user.MaximumCombo + "\n" +
		"–†–µ–ø–ª–µ–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –¥—Ä—É–≥–∏–º–∏ " + user.Replays + "\n" +
		"–£—Ä–æ–≤–µ–Ω—å " + user.Level + "\n" +
		"---------------------------\n" +
		"–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ " + user.PlayTime + "\n" +
		"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ " + user.SupportLvl + "\n"

	if user.PostCount != "0" {
		responseText += "–ü–æ—Å—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ " + user.PostCount + "\n"
	}

	if user.FollowersCount != "0" {
		responseText += "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ " + user.FollowersCount + "\n"
	}

	if user.IsOnline == "true" {
		responseText += "–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω \n"
	} else {
		responseText += "–°–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏ \n"
	}

	if user.IsActive == "true" {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω \n"
	} else {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω \n"
	}

	if user.IsDeleted == "true" {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω \n"
	}

	if user.IsBot == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞ \n"
	}

	if user.IsNat == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ü–µ–Ω–∫–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏–π \n"
	}

	if user.IsModerator == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ \n"
	}

	if user.ProfileColor != "" {
		responseText += "–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è" + user.ProfileColor + "\n"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendPict(botUrl, update, SendPhoto{
		PhotoUrl: user.AvatarUrl,
		ChatId:   update.Message.Chat.ChatId,
		Caption:  responseText,
	})
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Osu!
func SendOsuSmartInfo(botUrl string, update Update, username string) {

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
	if username == "" {
		username = "hud0shnik"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API
	resp, err := http.Get("https://osustatsapi.vercel.app/api/userString?id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("OsuStatsAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(OsuUserInfo)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if user.Username == "" {
		SendMsg(botUrl, update, user.Error)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API (–¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)
	resp, err = http.Get("https://osustatsapi.vercel.app/api/user?id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		fmt.Println("OsuStatsAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ = ioutil.ReadAll(resp.Body)
	var userSmart = new(OsuSmartInfo)
	json.Unmarshal(body, &userSmart)

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–Ω–≥–∞ –∏ –æ—á–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	var avgRank int
	var kfe float64

	for _, r := range userSmart.RankHistory.Data {
		avgRank += r
	}
	avgRank = avgRank / len(userSmart.RankHistory.Data)

	kfe = math.Floor(float64(userSmart.TotalHits)/float64(userSmart.PlayCount)*userSmart.Accuracy/100*100) / 100

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	responseText := "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + user.Username + "\n"

	if user.Names[0] != "" {
		responseText += "Aka " + user.Names[0] + "\n"
	}

	responseText += "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã " + user.CountryCode + "\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ –º–∏—Ä–µ " + user.GlobalRank + "\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ —Å—Ä–µ–¥–Ω–µ–º " + fmt.Sprint(avgRank) + "\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ —Å—Ç—Ä–∞–Ω–µ " + user.CountryRank + "\n" +
		"–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–π " + user.Accuracy + "%\n" +
		"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å " + fmt.Sprint(kfe) + "\n" +
		"PP " + user.PP + "\n" +
		"-------–∫–∞—Ä—Ç—ã---------\n" +
		"SSH: " + user.SSH + "\n" +
		"SH: " + user.SH + "\n" +
		"SS: " + user.SS + "\n" +
		"S: " + user.S + "\n" +
		"A: " + user.A + "\n" +
		"---------------------------\n" +
		"–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ " + user.RankedScore + "\n" +
		"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä " + user.PlayCount + "\n" +
		"–í—Å–µ–≥–æ –æ—á–∫–æ–≤ " + user.TotalScore + "\n" +
		"–í—Å–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π " + user.TotalHits + "\n" +
		"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ " + user.MaximumCombo + "\n" +
		"–†–µ–ø–ª–µ–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –¥—Ä—É–≥–∏–º–∏ " + user.Replays + "\n" +
		"–£—Ä–æ–≤–µ–Ω—å " + user.Level + "\n" +
		"---------------------------\n" +
		"–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ " + user.PlayTime + "\n" +
		"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ " + user.SupportLvl + "\n"

	if user.PostCount != "0" {
		responseText += "–ü–æ—Å—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ " + user.PostCount + "\n"
	}

	if user.FollowersCount != "0" {
		responseText += "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ " + user.FollowersCount + "\n"
	}

	if user.IsOnline == "true" {
		responseText += "–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω \n"
	} else {
		responseText += "–°–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏ \n"
	}

	if user.IsActive == "true" {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω \n"
	} else {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω \n"
	}

	if user.IsDeleted == "true" {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω \n"
	}

	if user.IsBot == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞ \n"
	}

	if user.IsNat == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ü–µ–Ω–∫–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏–π \n"
	}

	if user.IsModerator == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ \n"
	}

	if user.ProfileColor != "" {
		responseText += "–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è" + user.ProfileColor + "\n"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendPict(botUrl, update, SendPhoto{
		PhotoUrl: user.AvatarUrl,
		ChatId:   update.Message.Chat.ChatId,
		Caption:  responseText,
	})
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
func Check(botUrl string, update Update) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–π id
	if update.Message.Chat.ChatId == viper.GetInt("DanyaChatId") {

		// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
		start := time.Now()

		// –í—ã–∑–æ–≤ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
		SendCryptoData(botUrl, update)
		SendFromReddit(botUrl, update, "")
		Coin(botUrl, update)
		Help(botUrl, update)
		SendCommits(botUrl, update, "hud0shnik", "")
		SendMsg(botUrl, update, Dice("/d20"))
		Ball8(botUrl, update)
		SendRandomSticker(botUrl, update)
		SendFromReddit(botUrl, update, "parrots")

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫
		/*for i := 1; i < 7; i++ {
			SendErrorMessage(botUrl, update, i)
		}*/

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		SendMsg(botUrl, update, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ "+time.Since(start).String())
		return
	}

	// –í—ã–≤–æ–¥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	SendMsg(botUrl, update, "Error 403! Beep Boop... Forbidden! Access denied ü§ñ")
}
