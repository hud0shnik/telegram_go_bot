package mods

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
type TelegramResponse struct {
	Result []Update `json:"result"`
}

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat    Chat    `json:"chat"`
	Text    string  `json:"text"`
	Sticker Sticker `json:"sticker"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type Sticker struct {
	File_id string `json:"file_id"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ API
type RedditResponse struct {
	Title   string `json:"title"`
	Url     string `json:"url"`
	Nsfw    bool   `json:"nsfw"`
	Spoiler bool   `json:"spoiler"`
}

type CryptoResponse struct {
	Symbol        string `json:"symbol"`
	ChangePercent string `json:"priceChangePercent"`
	LastPrice     string `json:"lastPrice"`
}

type IP2CountryResponse struct {
	CountryName  string `json:"countryName"`
	CountryEmoji string `json:"countryEmoji"`
}

type DogResponse struct {
	DogUrl string `json:"message"`
}

type StatsResponse struct {
	Username string `json:"username"`
	Name     string `json:"name"`
	Avatar   string `json:"avatar"`
	Stars    int    `json:"stars"`
}

type CommitsResponse struct {
	Date     string `json:"date"`
	Username string `json:"username"`
	Commits  int    `json:"commits"`
	Color    int    `json:"color"`
}

// –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
func Help(botUrl string, update Update) {
	SendMsg(botUrl, update, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+
		"\n\n/ip 67.77.77.7 - —É–∑–Ω–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ ip"+
		"\n\n/git username  date - –∫–æ–º–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å"+
		"\n\n/info username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–∞ GitHub"+
		"\n\n/crypto - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã SHIB"+
		"\n\n/d20 - –∫–∏–Ω—É—Ç—å –¥20, –≤–º–µ—Å—Ç–æ 20 –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ"+
		"\n\n/coin - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"+
		"\n\n/meme - –º–µ–º —Å —Ä–µ–¥–¥–∏—Ç–∞ (—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫, —è –∑–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—é üòÖ)"+
		"\n\n/cat –∏ /parrot - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞ –∏–ª–∏ –ø–æ–ø—É–≥–∞—è "+
		"\n\n–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–∑–∞–¥–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —è –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É üôÉ")
}

// –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –±—Ä–æ—Å–æ–∫ n-–≥—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
func Dice(msg string) string {
	num, err := strconv.Atoi(msg[2:])
	if err != nil {
		return "–≠—Ç–æ –≤–æ–æ–±—â–µ –∫—É–±–∏–∫?ü§®"
	}
	if num < 1 {
		return "–∫–∞–∫ —è –ø–æ —Ç–≤–æ–µ–º—É –∫–∏–Ω—É —Ç–∞–∫–æ–π –∫—É–±–∏–∫? –ß–µ—Ä–µ–∑ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ?ü§®"
	}
	// D10 - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É–±–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –≥—Ä–∞–Ω—å —Å –Ω–æ–º–µ—Ä–æ–º "0"
	if num == 10 {
		return strconv.Itoa(Random(10))
	}
	return strconv.Itoa(1 + Random(num))
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
func Ball8(botUrl string, update Update) {
	answers := [10]string{
		"–î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
		"100%",
		"–î–∞.",
		"100000000%",
		"–¢–æ—á–Ω–æ –¥–∞!",
		"–ù–µ—Ç, –ø—Ñ—Ñ",
		"–ù–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ—Ç",
		"–¢–æ—á–Ω–æ –Ω–µ—Ç!",
		"–ù–µ—Ç, –Ω–µ—Ç, –Ω–µ—Ç",
		"–ù–µ—Ç.",
	}

	SendMsg(botUrl, update, answers[Random(len(answers))])
}

// –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
func Random(n int) int {
	rand.Seed(time.Now().Unix())
	return rand.Intn(n)
}

// –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç–∫–∏
func Coin(botUrl string, update Update) {
	if Random(2) == 0 {
		SendMsg(botUrl, update, "–û—Ä—ë–ª")
	} else {
		SendMsg(botUrl, update, "–†–µ—à–∫–∞")
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –†–µ–¥–¥–∏—Ç–∞ (–º–µ–º—ã, –∫–æ—à–∫–∏, –ø–æ–ø—É–≥–∞–∏)
func SendFromReddit(botUrl string, update Update, subj string) error {
	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–µ—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	url := "https://meme-api.herokuapp.com/gimme/" + subj
	req, _ := http.NewRequest("GET", url, nil)
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Meme API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return err
	}
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)
	var response = new(RedditResponse)
	json.Unmarshal(body, &response)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–∫—É
	if response.Nsfw || response.Spoiler {
		response.Url = "https://belikebill.ga/billgen-API.php?default=1"
		response.Title = "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–æ —Å–ø–æ–π–ª–µ—Ä–æ–º –∏–ª–∏ nsfw-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É —è –∑–∞–º–µ–Ω–∏–ª –µ—ë –Ω–∞ —ç—Ç–æ"
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	botImageMessage := SendPhoto{
		ChatId:   update.Message.Chat.ChatId,
		PhotoUrl: response.Url,
		Caption:  response.Title,
	}
	SendPict(botUrl, update, botImageMessage)
	return nil
}

// –í—ã–≤–æ–¥ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã SHIB
func SendCryptoData(botUrl string, update Update) {
	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–µ—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	url := "https://api2.binance.com/api/v3/ticker/24hr?symbol=SHIBBUSD"
	req, _ := http.NewRequest("GET", url, nil)
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Binance API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)
	var response = new(CryptoResponse)
	json.Unmarshal(body, &response)

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	if response.ChangePercent[0] == '-' {
		SendMsg(botUrl, update, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∫—É—Ä—Å "+response.Symbol+" —É–ø–∞–ª –Ω–∞ "+response.ChangePercent[1:]+"%\n"+
			"–¥–æ –æ—Ç–º–µ—Ç–∫–∏ –≤ "+response.LastPrice+"$\n\n")
		SendRandomShibaSticker(botUrl, update, true)
	} else {
		SendMsg(botUrl, update, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∫—É—Ä—Å "+response.Symbol+" –≤—ã—Ä–æ—Å –Ω–∞ "+response.ChangePercent+"%\n"+
			"–¥–æ –æ—Ç–º–µ—Ç–∫–∏ –≤ "+response.LastPrice+"$\n\n")
		SendRandomShibaSticker(botUrl, update, false)
	}
}

// –§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥
func Check(botUrl string, update Update) {
	if update.Message.Chat.ChatId == viper.GetInt("DanyaChatId") {
		start := time.Now()

		fmt.Println("Start Check() ...")
		SendCryptoData(botUrl, update)
		SendFromReddit(botUrl, update, "")
		Coin(botUrl, update)
		Help(botUrl, update)
		SendCommits(botUrl, update, "hud0shnik")
		SendMsg(botUrl, update, Dice("/d20"))
		Ball8(botUrl, update)
		SendRandomSticker(botUrl, update)
		SendFromReddit(botUrl, update, "parrots")

		for i := 1; i < 7; i++ {
			SendErrorMessage(botUrl, update, i)
		}

		SendMsg(botUrl, update, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ "+time.Since(start).String())
		return
	}
	SendMsg(botUrl, update, "Error 403! Beep Boop... Forbidden! Access denied ü§ñ")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
func SendErrorMessage(botUrl string, update Update, errorCode int) {
	var result string

	switch errorCode {
	case 1:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã API"
	case 2:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã json.Marshal()"
	case 3:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendSticker"
	case 4:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendPhoto"
	case 5:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendMessage"
	case 6:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã stickers.json"
	default:
		result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
	}

	// –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏, –±–æ—Ç –º–µ–Ω—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç (–∞–Ω–æ–Ω–∏–º–Ω–æ)
	var updateDanya Update
	updateDanya.Message.Chat.ChatId = viper.GetInt("DanyaChatId")
	SendMsg(botUrl, updateDanya, "–î–∞–Ω—å, —Ç—É—Ç —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "+result+", –Ω–∞–¥–µ—é—Å—å –æ–Ω —Å–∫–æ—Ä–æ —Ç–µ–±–µ –æ –Ω–µ–π –Ω–∞–ø–∏—à–µ—Ç.")

	// –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	// –ò –ø—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –¥–ª—è –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
	result += ", —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã \n\nhttps://vk.com/hud0shnik\nhttps://vk.com/hud0shnik\nhttps://vk.com/hud0shnik"
	SendMsg(botUrl, update, result)
}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub
func SendStats(botUrl string, update Update, parametrs string) {

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	resp, err := http.Get("https://hud0shnikgitapi.herokuapp.com/info/" + parametrs)
	if err != nil {
		fmt.Println("GithubGoAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(StatsResponse)
	json.Unmarshal(body, &user)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendPict(botUrl, update, SendPhoto{
		PhotoUrl: user.Avatar,
		ChatId:   update.Message.Chat.ChatId,
		Caption: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + user.Username + ":\n" +
			"–ò–º—è - " + user.Name + "\n" +
			"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ " + strconv.Itoa(user.Stars) + "‚≠ê\n" +
			"C—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä:\n " + user.Avatar,
	})
}

// –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub
func SendCommits(botUrl string, update Update, parametrs string) {
	i, date := 0, ""

	// –ü–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞ –∏ –Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã
	for ; i < len(parametrs); i++ {
		if parametrs[i] == ' ' {
			break
		}
	}

	// –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–¥–∞–Ω–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ—ë
	if i != len(parametrs) {
		date = parametrs[i+1:]
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	resp, err := http.Get("https://hud0shnikgitapi.herokuapp.com/commits/" + parametrs[:i] + "/" + date)
	if err != nil {
		fmt.Println("GithubGoAPI error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(CommitsResponse)
	json.Unmarshal(body, &user)

	// –ú–µ–Ω—è–µ—Ç date –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è" –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–≤–æ–¥–∞
	if date == "" {
		date = "—Å–µ–≥–æ–¥–Ω—è"
	}

	// –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	switch user.Color {
	case 1:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits))
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYwmG11bAfndI1wciswTEVJUEdgB2jAAI5AAOtZbwUdHz8lasybOojBA")
	case 2:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits)+", –Ω–µ–ø–ª–æ—Ö–æ!")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIXWmGyDE1aVXGUY6lcjKxx9bOn0JA1AAJOAAOtZbwUIWzOXysr2zwjBA")
	case 3:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits)+", –æ—Ç–ª–∏—á–Ω–æ!!")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYymG11mMdODUQUZGsQO97V9O0ZLJCAAJeAAOtZbwUvL_TIkzK-MsjBA")
	case 4:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ "+date+" "+strconv.Itoa(user.Commits)+", –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!!!")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIXXGGyDFClr69PKZXJo9dlYMbyilXLAAI1AAOtZbwU9aVxXMUw5eAjBA")
	default:
		SendMsg(botUrl, update, "–ö–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYG2GzRVNm_d_mVDIOaiLXkGukArlTAAJDAAOtZbwU_-iXZG7hfLsjBA")
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP –∞–¥—Ä–µ—Å—Å—É
func CheckIPAdress(botUrl string, update Update, IP string) {
	if IP == "127.0.0.1" {
		SendMsg(botUrl, update, "–ê–π–ø–∏—à–Ω–∏–∫ –ª–æ–∫–∞–ª—Ö–æ—Å—Ç–∞, –∞–≥–∞")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIYLGGzR7310Hqf8K2sljgcQF8kgOpYAAJTAAOtZbwUo9c59oswVBQjBA")
		return
	}
	ipArray := strings.Split(IP, ".")
	if len(ipArray) != 4 {
		SendMsg(botUrl, update, "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç IP")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIY4mG13Vr0CzGwyXA1eL3esZVCWYFhAAJIAAOtZbwUgHOKzxQtAAHcIwQ")
		return
	}
	for _, ipPart := range ipArray {
		num, err := strconv.Atoi(ipPart)
		if err != nil || num < 0 || num > 255 || (ipPart != fmt.Sprint(num)) {
			SendMsg(botUrl, update, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω IP")
			SendStck(botUrl, update, "CAACAgIAAxkBAAIY4GG13SepKZJisWVrMrzQ9JyRpWFrAAJKAAOtZbwUiXsNXgiPepIjBA")
			return
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–µ—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	SendMsg(botUrl, update, "–ò—â—É...")
	url := "https://api.ip2country.info/ip?" + IP
	req, _ := http.NewRequest("GET", url, nil)
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("IP2Country API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return
	}
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)
	var response = new(IP2CountryResponse)
	json.Unmarshal(body, &response)

	// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
	if response.CountryName == "" {
		SendMsg(botUrl, update, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç IP")
		SendStck(botUrl, update, "CAACAgIAAxkBAAIY4mG13Vr0CzGwyXA1eL3esZVCWYFhAAJIAAOtZbwUgHOKzxQtAAHcIwQ")
		return
	}
	SendMsg(botUrl, update, "–ù–∞—à—ë–ª! –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è - "+response.CountryName+" "+response.CountryEmoji+
		"\n\n–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º IP, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—è—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤–µ—Å—å –∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ.")
	SendStck(botUrl, update, "CAACAgIAAxkBAAIXqmGyGtvN_JHUQVDXspAX5jP3BvU9AAI5AAOtZbwUdHz8lasybOojBA")
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤)
func InitConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}
