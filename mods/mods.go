package mods

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"strconv"
	"time"

	"github.com/spf13/viper"
)

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Sticker struct {
	File_id string `json:"file_id"`
}

type Message struct {
	Chat    Chat    `json:"chat"`
	Text    string  `json:"text"`
	Sticker Sticker `json:"sticker"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type TelegramResponse struct {
	Result []Update `json:"result"`
}

type RedditResponse struct {
	Title   string `json:"title"`
	Url     string `json:"url"`
	Nsfw    bool   `json:"nsfw"`
	Spoiler bool   `json:"spoiler"`
}

type CryptoResponse struct {
	Symbol        string `json:"symbol"`
	ChangePercent string `json:"priceChangePercent"`
	LastPrice     string `json:"lastPrice"`
}

func InitConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}

func Help(botUrl string, update Update) {
	SendMsg(botUrl, update, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+
		"\n\n/weather - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –û–ª—å—Ö–æ–≤–æ–π"+
		"\n\n/weather7 - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 7 –¥–Ω–µ–π"+
		"\n\n/sun - —É–∑–Ω–∞—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞"+
		"\n\n/crypto - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã SHIB"+
		"\n\n/time - —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è"+
		"\n\n/d20 - –∫–∏–Ω—É—Ç—å –¥20, –≤–º–µ—Å—Ç–æ 20 –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ"+
		"\n\n/coin - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"+
		"\n\n/meme - –º–µ–º —Å —Ä–µ–¥–¥–∏—Ç–∞ (—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫, —è –∑–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—é üòÖ)"+
		"\n\n/cat –∏ /parrot - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞ –∏–ª–∏ –ø–æ–ø—É–≥–∞—è "+
		"\n\n–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–∑–∞–¥–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —è –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É üôÉ")
}

func Dice(msg string) string {
	num, err := strconv.Atoi(msg[2:])
	if err != nil {
		return "–≠—Ç–æ –≤–æ–æ–±—â–µ –∫—É–±–∏–∫?ü§®"
	}
	if num < 1 {
		return "–∫–∞–∫ —è –ø–æ —Ç–≤–æ–µ–º—É –∫–∏–Ω—É —Ç–∞–∫–æ–π –∫—É–±–∏–∫? –ß–µ—Ä–µ–∑ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ?ü§®"
	}
	if num == 10 {
		return strconv.Itoa(Random(10))
	}
	return strconv.Itoa(1 + Random(num))
}

func Ball8(botUrl string, update Update) {
	answers := []string{
		"–î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
		"100%",
		"–î–∞.",
		"100000000%",
		"–¢–æ—á–Ω–æ –¥–∞!",
		"–ù–µ—Ç, –ø—Ñ—Ñ",
		"–ù–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ—Ç",
		"–¢–æ—á–Ω–æ –Ω–µ—Ç!",
		"–ù–µ—Ç, –Ω–µ—Ç, –Ω–µ—Ç",
		"–ù–µ—Ç.",
	}

	SendMsg(botUrl, update, answers[Random(len(answers))])
}

func Random(n int) int {
	rand.Seed(time.Now().Unix())
	return rand.Intn(n)
}

func Coin() string {
	if Random(2) == 0 {
		return "–û—Ä—ë–ª"
	}
	return "–†–µ—à–∫–∞"
}

func SendFromReddit(botUrl string, update Update, subj string) error {
	url := "https://meme-api.herokuapp.com/gimme/" + subj
	req, _ := http.NewRequest("GET", url, nil)
	res, err := http.DefaultClient.Do(req)

	if err != nil {
		fmt.Println("Meme API error: ", err)
		SendErrorMessage(botUrl, update, 1)
		return err
	}

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)
	var rs = new(RedditResponse)
	json.Unmarshal(body, &rs)

	if rs.Nsfw || rs.Spoiler {
		rs.Url = "https://belikebill.ga/billgen-API.php?default=1"
		rs.Title = "–ú–µ–º –æ–∫–∞–∑–∞–ª—Å—è —Å–æ —Å–ø–æ–π–ª–µ—Ä–æ–º –∏–ª–∏ nsfw-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –≤–æ—Ç —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ë–∏–ª–ª–æ–º :^)"
	}

	botImageMessage := SendPhoto{
		ChatId:  update.Message.Chat.ChatId,
		Photo:   rs.Url,
		Caption: rs.Title,
	}

	SendPict(botUrl, update, botImageMessage)
	return nil
}

func SendCryptoData(botUrl string, update Update) {
	url := "https://api2.binance.com/api/v3/ticker/24hr?symbol=SHIBBUSD"
	req, _ := http.NewRequest("GET", url, nil)
	res, err := http.DefaultClient.Do(req)

	if err != nil {
		fmt.Println("Binance API error: ", err)
		SendErrorMessage(botUrl, update, 1)
	}

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)
	var rs = new(CryptoResponse)
	json.Unmarshal(body, &rs)

	for i := len(rs.LastPrice) - 1; ; i-- {
		if rs.LastPrice[i] == '0' {
			rs.LastPrice = rs.LastPrice[:i]
		} else {
			break
		}
	}

	SendMsg(botUrl, update, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∫—É—Ä—Å "+rs.Symbol+" –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "+rs.ChangePercent+"%\n"+
		"–¥–æ –æ—Ç–º–µ—Ç–∫–∏ –≤ "+rs.LastPrice+"$\n\n")

	SendRandomShibaSticker(botUrl, update)
}

func GetTime(botUrl string, update Update, DanyaFlag bool) {
	currentTime := time.Now().Add(3 * time.Hour)
	if currentTime.Format("01-02") == "11-08" {
		SendMsg(botUrl, update, "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–∞–º–æ–≥–æ —É–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–æ –≤—Å–µ–π –ú–æ—Å–∫–≤–µ - –î–∞–Ω–∏!!!")
		if DanyaFlag {
			SendMsg(botUrl, update, "üéÇ C –¥—Ä, —Å–æ–∑–¥–∞—Ç–µ–ª—å!!! ü•≥ üéâ")
		}
		SendStck(botUrl, update, "CAACAgIAAxkBAAINzWGH6G2PfGPH2eRiI-x9fHQ_McDSAAJZAAOtZbwU9LtHF4nhLQkiBA")
	} else {
		SendMsg(botUrl, update, currentTime.Format("15:04 2006-01-02"))
		SendStck(botUrl, update, "CAACAgIAAxkBAAIN6GGH7YzD5gGxsI3XYzLICzRnQ0vWAAKQAgACVp29CjLSqXG41NC1IgQ")
	}
}

func Check(botUrl string, update Update, DanyaFlag bool) {
	if DanyaFlag {
		start := time.Now()

		fmt.Println("Start Check() ...")
		SendCurrentWeather(botUrl, update)
		SendDailyWeather(botUrl, update, 3)
		SendCryptoData(botUrl, update)
		SendFromReddit(botUrl, update, "")
		SendMsg(botUrl, update, Coin())
		Help(botUrl, update)
		Sun(botUrl, update)
		GetTime(botUrl, update, DanyaFlag)
		SendMsg(botUrl, update, Dice("/d20"))
		Ball8(botUrl, update)
		SendRandomSticker(botUrl, update)
		SendFromReddit(botUrl, update, "parrots")

		for i := 1; i < 7; i++ {
			SendErrorMessage(botUrl, update, i)
		}

		fmt.Println("That's all!\tTime:", time.Since(start))
		SendMsg(botUrl, update, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ "+time.Since(start).String())
		return
	}
	SendMsg(botUrl, update, "Error 403! Beep Bop... Forbidden! Access denied ü§ñ")
}

func SendErrorMessage(botUrl string, update Update, errorCode int) {
	result := "err"
	switch errorCode {
	case 1:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã API"
		break
	case 2:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã json.Marshal()"
		break
	case 3:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendSticker"
		break
	case 4:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendPhoto"
		break
	case 5:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ SendMessage"
		break
	case 6:
		result = "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã stickers.json"
		break
	}
	result += ", —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã \n\nhttps://vk.com/hud0shnik\nhttps://vk.com/hud0shnik\nhttps://vk.com/hud0shnik"
	SendMsg(botUrl, update, result)
}
